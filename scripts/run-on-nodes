#!/usr/bin/env ruby

$debug = false

cashmere=ENV['CASHMERE']

NODE_MAP = { 
    "k20" => ["node078", "node079", "node080", "node081", "node082", "node083",
	"node084", "node085"],
    "xeon_phi" => ["node078", "node079"],
    "gtx480" => ["node009", "node010", "node011", "node012", "node023",
	"node024", "node025", "node026", "node029", "node030", "node043",
	"node044", "node045", "node046", "node047", "node048", "node057",
	"node058", "node063", "node064", "node065", "node066", "node067"],
    "c2050" => ["node061", "node062"],
    "gtx680" => ["node068"],
    "hd7970" => ["node076"],
    "titan" => ["node077"],
    "e5_2620" => ["node078", "node079", "node080", "node081", "node082",
	"node083", "node084", "node085"],
    "regular" => ["node001", "node002", "node003", "node004", "node005",
	"node006", "node007", "node008", "node013", "node014", "node015",
	"node016", "node017", "node018", "node019", "node020", "node021",
	"node022", "node027", "node028", "node031", "node032", "node033",
	"node034", "node035", "node036", "node037", "node038", "node039",
	"node040", "node041", "node042", "node049", "node050", "node051",
	"node052", "node053", "node054", "node055"] }
	
# apparently, these nodes are disabled: "node056", "node059", "node060"

QUEUE_MAP = {
    "k20" => "fat.q", 
    "xeon_phi" => "fat.q",
    "c2050" => "gpu.q",
    "gtx480" => "gpu.q",
    "gtx680" => "gpu.q",
    "titan" => "fat.q",
    "hd7970" => "fat.q",
    "e5_2620" => "fat.q",
    "regular" => "all.q" }

EXTRA_PARAM_MAP = {
    "gtx480" => "-native '-l gpu=GTX480' ",
    "gtx680" => "-native '-l gpu=GTX680' ",
    "c2050" => "-native '-l gpu=C2050' ",
    "k20" => "-native '-l fat,gpu=K20' ",
    "titan" => "-native '-l fat,gpu=GTX-Titan' ",
    "xeon_phi" => "-native '-l fat,accel=XeonPhi' ",
    "hd7970" => "-native '-l fat,gpu=HD7970' " }

NODES_NOT_AVAILABLE = `preserve -llist | tail -n +4 | awk 'BEGIN { FS="\\t"; x = ""} {if ($7 == "r") x = x $9 " "} END { print x }'`.split


if ARGV.length == 0
    puts "need a node specification"
    exit 1
end

$nodes = []
$extra_params = []

class String
    def is_i?
	!!(self =~ /\A[-+]?[0-9]+\z/)
    end
end

def ask
    puts "Continue [Y/n]"
    answer = $stdin.gets.chomp
    case answer
    when "", "Y"
	return true
    else
	return false
    end
end

def check_node(node)
    if not NODE_MAP.keys.include? node
	print node, " not in ", NODE_MAP.keys.join(", "), "\n"
	exit 1
    end
end


def get_nodes(node, numberString) 
    check_node(node)

    available_nodes = NODE_MAP[node] - NODES_NOT_AVAILABLE

    if numberString == "all"
	number = NODE_MAP[node].length
    elsif numberString.is_i?
	number = numberString.to_i
    else
	print "unrecognized number for #{node}"
	exit 1
    end

    selected_nodes = available_nodes[0, number]
    if selected_nodes.length < number
	print "can only find ", selected_nodes.length, " ", node, " nodes\n"
	if $debug
	    print "available nodes: ", available_nodes.join(", "), "\n"
	    print "selected_nodes: ", selected_nodes.join(", "), "\n"
	end
	if not ask
	    exit 0
	end
    end
    print "selecting ", selected_nodes.length, " ", node, 
	" node#{selected_nodes.length == 1 ? "" : "s"}\n"
    selected_nodes = selected_nodes.map { |n| QUEUE_MAP[node] + "@" + n }
    $nodes += selected_nodes
    
    if selected_nodes.length > 0
	$extra_params += [EXTRA_PARAM_MAP[node]]
    end
end


def isNodeSpec(arg)
    arg_spec = arg.split("=")
    arg_spec.length == 2 && NODE_MAP.keys.include?(arg_spec[0])
end

node_specs, other_args = ARGV.partition { |a| isNodeSpec a }

if other_args.length < 3
    puts "not enough arguments"
    exit 1
end

if node_specs.length == 0
    puts "need a node specification: <node=1> or <node=all>"
    puts "node types: #{NODE_MAP.keys.join(", ")}"
    exit 1
end

basedir = other_args[0]
jar = other_args[1]
className = other_args[2]
rest = other_args[3..-1]
classpath = `#{cashmere}/scripts/create-class-path #{basedir} #{jar}`.chomp
port = ENV['CASHMERE_PORT']

node_specs.each do |a|
    arg_spec = a.split("=")
    if arg_spec.length == 2
	node = arg_spec[0]
	number = arg_spec[1]
	get_nodes(node, number)
    else
	puts "wrong arguments"
	exit 1
    end
end

command = "prun -np #{$nodes.length} -q #{$nodes.join(',')} " +
    "-t 30:0 " +
    "#{$extra_params.join} " + 
    "CLASSPATH=#{classpath} ./run-script -Dcashmere.closed -Xmx25G " +
    "-Dcashmere.detailedStats=true -Dibis.server.address=fs0.das4.cs.vu.nl " +
    "-Dcashmere.queueSteals=false " + "-Dcashmere.ft.naive=true " +
    "-Dibis.pool.size=#{$nodes.length} -Dibis.server.port=#{port} " +
    "-Dibis.pool.name=das4.#{$$} #{className} #{rest.join(" ")}\n"

print command

exec(command)
