#!/usr/bin/env ruby

$cashmere=ENV['CASHMERE']



NODE_MAP = { 
    "TitanX" => ["node001", "node002", "node003", "node004", "node005",
	"node006", "node007", "node024", "node025", "node046", "node047",
	"node048", "node049", "node050",
	"node051", "node052"],
    "K40" => ["node027"],
    "K20" => ["node028"],
    "XeonPhi" => ["node028"],
    "TitanX-Pascal" => ["node026", "node029"],
    "regular" => ["node008", "node009",
	"node010", "node011", "node012",
	"node013", "node014", "node015",
	"node016", "node017", "node018",
	"node019", "node020", "node021",
	"node022", "node023",
	"node030", "node031", "node032",
	"node033", "node034", "node035",
	"node036", "node037", "node038",
	"node039", "node040", "node041",
	"node042", "node043", "node044",
	"node045"] }


$debug = false

if ARGV.length == 0
    puts "need a node specification"
    exit 1
end

$nodes = []
$nrNodes = 0
$extra_params = []

class String
    def is_i?
	!!(self =~ /\A[-+]?[0-9]+\z/)
    end
end

def ask
    puts "Continue [Y/n]"
    answer = $stdin.gets.chomp
    case answer
    when "", "Y"
	return true
    else
	return false
    end
end

def check_node(node)
    if not NODE_MAP.keys.include? node
	print node, " not in ", NODE_MAP.keys.join(", "), "\n"
	exit 1
    end
end




def get_nodes(node, numberString) 
    check_node(node)

    available_nodes = NODE_MAP[node] - NODES_NOT_AVAILABLE

    if numberString == "all"
	number = NODE_MAP[node].length
    elsif numberString.is_i?
	number = numberString.to_i
    else
	print "unrecognized number for #{node}"
	exit 1
    end

    selected_nodes = available_nodes[0, number]
    if selected_nodes.length < number
	print "can only find ", selected_nodes.length, " ", node, " nodes\n"
	if $debug
	    print "available nodes: ", available_nodes.join(", "), "\n"
	    print "selected_nodes: ", selected_nodes.join(", "), "\n"
	end
	if not ask
	    exit 0
	end
    end
    print "selecting ", selected_nodes.length, " ", node, 
	  " node#{selected_nodes.length == 1 ? "" : "s"}\n"
    $nrNodes += selected_nodes.length;
    $nodes += ["#{node}*#{selected_nodes.length}"]
end




def isNodeSpec(arg)
    arg_spec = arg.split("=")
    arg_spec.length == 2 && NODE_MAP.keys.include?(arg_spec[0])
end

$node_specs, other_args = ARGV.partition { |a| isNodeSpec a }

if other_args.length < 3
    puts "not enough arguments"
    exit 1
end

if $node_specs.length == 0
    puts "need a node specification: <node=1> or <node=all>"
    puts "node types: #{NODE_MAP.keys.join(", ")}"
    exit 1
end

basedir = other_args[0]
jar = other_args[1]
$className = other_args[2]
$rest = other_args[3..-1]
$classpath = `#{$cashmere}/scripts/create-class-path #{basedir} #{jar}`.chomp
$port = ENV['CASHMERE_PORT']







# EXTRA_PARAM_MAP = {
#     "K20" => "-native '-C K20 --gres=gpu:1' ",
#     "K40" => "-native '-C K40 --gres=gpu:1' ",
#     "XeonPhi" => "-native '-C XeonPhi --gres=mic:1",
#     "TitanX" => "-native '-C TitanX --gres=gpu:1' ",
#     "Titan" => "-native '-C Titan --gres=gpu:1' " }

NODES_NOT_AVAILABLE = `preserve -llist | tail -n +4 | awk 'BEGIN { FS="\\t"; x = ""} {if ($7 == "R") x = x $9 " "} END { print x }'`.split


# def get_queue(node)
#   "defq"
# end


def build_constraints
  "-native '--gres=gpu -C [#{$nodes.join("&")}]'"
end

$node_specs.each do |a|
  arg_spec = a.split("=")
  if arg_spec.length == 2
    node = arg_spec[0]
    number = arg_spec[1]
    get_nodes(node, number)
  else
    puts "wrong arguments"
    exit 1
  end
end



command = "prun -np #{$nrNodes} " +
    "-t 30:0 " + "#{build_constraints} " +
    "#{$extra_params.join} " + 
    "CLASSPATH=#{$classpath}:$CLASSPATH $CASHMERE/scripts/run-script -Dcashmere.closed -Xmx25G " +
    "-Dcashmere.detailedStats=true -Dibis.server.address=fs0.das5.cs.vu.nl " +
    "-Dcashmere.queueSteals=false " + "-Dcashmere.ft.naive=true " +
    "-Dibis.pool.size=#{$nrNodes} -Dibis.server.port=#{$port} " +
    "-Dibis.pool.name=das5.#{$$} #{$className} #{$rest.join(" ")}\n"

print command

exec(command)

